import pandas as pd
import time
from sklearn.model_selection import train_test_split
from sklearn.utils import resample



from main import smo
from union import *
from read_rule import read
from test import score
from log import log 

ratio = 0.2
bootstraps = 5


whole_data = pd.read_csv("Data/diabetes.csv")
col = whole_data.columns.tolist()

train_df, test_df = train_test_split(whole_data, test_size=0.2, random_state=42)

positive_data = train_df[whole_data["Outcome"] == 1]
negative_data = train_df[whole_data["Outcome"] == 0]

df_pos_train = positive_data[col[:-1]]
df_neg_train = negative_data[col[:-1]]

y_pos_train = pd.Series([0] * df_pos_train.shape[0])
y_neg_train = pd.Series([0] * df_neg_train.shape[0])


def pickBest(ruleset,df,sign):
    best = 0
    size = df[df["Outcome"] == sign].shape[0]
    pick = []
    for rule in ruleset:
        t,f = score(df,rule,sign)
        if t > best:
            best = t
            pick = rule

    return pick,best/size


def method1():
    """  
         make union of all the rules in the rule set and then again makes the union for each united the rules 
         of the bootstrappes. 
    """
    positive_rules = []
    
    for i in range(bootstraps):
        X_bs, y_bs = resample(df_pos_train, y_pos_train, replace=True)
        rules = smo(X_bs,1)
        positive_rules.append(rules)


    negative_rules = []

    for i in range(bootstraps):
        X_bs, y_bs = resample(df_neg_train, y_neg_train, replace=True)
        rules = smo(X_bs,0)
        negative_rules.append(rules)
    

    union_positive = []
    for rules in positive_rules:
        print(len(rules))
        union_positive.append(union_OR(rules))
    

    union_negative = []
    for rules in negative_rules:
        print(len(rules))
        union_negative.append(union_OR(rules))
    
    
    final_pos_rule = union_OR(union_positive)
    final_neg_rule = union_OR(union_negative)

    read(final_pos_rule,1,display=False)
    read(final_neg_rule,0,display=False)

    pos_rule_acc = score(test_df,final_pos_rule,1)
    neg_rule_acc = score(test_df,final_neg_rule,0)

    print(f"Postive : {pos_rule_acc * 100} %")
    print(f"Negative : {neg_rule_acc * 100} %")

def method2(log_result = True):
    positive_rules = []
    
    for i in range(bootstraps):
        X_bs, y_bs = resample(df_pos_train, y_pos_train, replace=True)
        rules = smo(X_bs,1)
        positive_rules.append(rules)

    negative_rules = []

    for i in range(bootstraps):
        X_bs, y_bs = resample(df_neg_train, y_neg_train, replace=True)
        rules = smo(X_bs,0)
        negative_rules.append(rules)

    # positive_rules = [[[0.21340066414552444, 1.398352257485799, 11.410283454974897, 0.2845662396884618, 103.67216728335418, 97.92600633359848, 0.012440557172086447, 122.0, 8.900140498345518, 0.6811797842466294, 99.0, 22.09655347484969, 0.13940241672756354, 519.3163204941342, 60.85107168071865, 0.03137462006217941, 2.2738282965060996, 14.104934388378263, 0.17972140261786262, 0.8872205338485527, 0.8729942517403058, 0.061003078841394345, 36.21382254119914, 30.964120891775284], [0.3550794992398517, 5.991130242917654, 4.955234770795799, 0.0, 34.80686313240206, 28.99255735968638, 0.08895253578927154, 121.49563188886499, 53.99596346620803, 0.3319347863324465, 25.073834601875085, 62.97766295714337, 0.6684870520539219, 218.63931700357085, 768.9221778585325, 0.14060211701360126, 34.876052476883004, 56.343485300677145, 0.0, 0.7657934869915033, 2.3171060189026047, 0.21560377909058398, 73.32555446330792, 51.08896873006424], [0.48472321583026545, 8.09787705270486, 1.536674681731752, 0.14006888259054928, 132.90550556503743, 27.9123803629967, 0.3025792880553755, 68.88401585148725, 91.35655529395335, 0.22088016851096737, 46.56979499847855, 59.88521454830236, 0.06157576967679479, 2.932266548358535, 320.69991676673493, 0.2030475105005357, 26.83655402990794, 61.287789769398174, 0.9745709417442856, 0.2397515222589119, 2.1881657190852906, 0.2025981426362531, 72.29953204596505, 69.87526007387942]], [[0.6857600543231243, 11.762038409124987, 0.0, 0.38712423310275407, 145.3610614953647, 132.1554466055309, 0.3210633651778395, 12.742464614720596, 107.91711558086917, 0.14604032308105183, 25.10118798138785, 82.80453546127195, 0.22169927424921787, 209.68957838814856, 652.4794650403244, 0.37432546516881726, 39.85379225795779, 0.0, 0.2162252265663226, 2.1165859736533754, 0.7875524766897735, 0.5422717906549015, 80.67505070495982, 30.12104098554155], [0.7113633956088303, 5.439846959808412, 17.0, 0.3827276408811925, 121.55255442429889, 9.451349018348962, 0.2927580467023301, 79.26343063375134, 10.129226067075269, 0.05030046952165501, 89.69503916141205, 18.799667092881485, 0.24375389796480867, 204.26204033690314, 196.03279695598852, 0.2911478618837064, 27.52521809785562, 54.79360646791432, 0.19896132070499667, 0.43905697957048506, 0.6569519196604828, 0.3353625098453811, 64.1388256334435, 37.4560402323016], [0.09432961968991738, 12.272249296516636, 15.925759211582369, 0.15182175020270272, 144.6602985466788, 7.776368825478428, 0.015599586752039762, 55.706150574534654, 115.27330891434407, 0.261773630891313, 63.51255852355512, 36.08232634699693, 0.061725403741813234, 724.1526796628605, 786.2991501407004, 0.38973161801421197, 25.948593200680047, 2.69365138101741, 0.024665838189730227, 0.6992207384396191, 0.6595944737214149, 0.9430740789729294, 78.38875804409791, 22.77883715480736]], [[0.19159262095862117, 0.0, 13.157772891917492, 0.39461696798923895, 5.053318199580634, 33.726064375795026, 0.11648524479633687, 17.784036773096375, 89.50521348518859, 0.0244889892695401, 43.54532165352988, 77.97139481341242, 0.445557270653697, 468.84028278919413, 374.8429531227767, 0.0, 30.49630582530841, 52.039163948315704, 0.7876683666338953, 2.42, 0.6433058576988036, 0.33309628536248514, 38.244147468616234, 27.373842022743077], [0.8700879590240566, 2.9867474072474582, 16.73787599732448, 0.16243003982079318, 92.52452900786605, 27.524690800938288, 0.23048710080578677, 54.67638252240467, 90.01459053033417, 0.19050565849258796, 58.1269335181478, 20.98965593680553, 0.39806838400027533, 788.5808084530272, 396.705231071467, 0.2736218645297772, 32.21877077140748, 2.917912799704279, 0.45893496203445405, 0.078, 0.4299776188184002, 0.3810104246686478, 66.3376900337226, 58.73173746771183], [0.26413679867093076, 13.014610740818835, 7.804618774091443, 0.021029360911621886, 122.01055758410224, 121.33663829483068, 0.08429357223812994, 72.518525948749, 106.61650400213406, 0.42239212354548206, 45.28876247683579, 73.8135849111106, 0.7372385670026925, 562.774526096738, 103.77330036030796, 0.2020234800241938, 42.86069004674681, 55.92346187306999, 0.36141429543763903, 0.7578701807716743, 2.318422932520291, 0.30593878511832184, 43.606124825405566, 31.77787355552305]], [[0.7288270414135819, 1.7234180989039205, 17.0, 0.26177173716056157, 125.2057803357669, 199.0, 0.44272490840620804, 69.74440657859752, 39.641854485681584, 0.40746721128336116, 83.13178817288482, 59.91109433323787, 0.0, 391.35285203686163, 137.74491358079652, 0.5107004555761254, 20.624038812643693, 67.1, 0.058505863253722715, 1.0430428039682007, 1.5002008553131851, 0.3270878230895026, 48.83731698440763, 44.269144675724014], [0.3728950109984336, 7.446790002209802, 5.8192973725438515, 0.2852648230306639, 192.61477412334276, 87.17278076348664, 0.07926503224832049, 23.863069536694, 10.116558558139454, 0.7179480731246424, 94.68483024569667, 10.40267723092446, 0.30797292234730184, 410.415434245925, 410.9902262881283, 0.0, 37.89065181028385, 23.44455630567313, 0.023796627451325686, 2.401537632959713, 1.8898940905371207, 0.060756008393709426, 60.95241492327143, 61.50420189624502]], [[0.24691862205101256, 14.82763849021094, 2.615064450951942, 0.36669818652610964, 70.99904246268966, 178.89596911259284, 0.1694130544273231, 0.0, 113.48370447932483, 0.2662366651105502, 61.827373612178846, 0.0, 0.3672189196564209, 846.0, 746.869499947518, 0.0, 31.212275046468083, 57.12041480898688, 0.39229817174515136, 2.184778419115181, 1.302894259018517, 0.9690303417136075, 27.656694855298056, 81.0], [1.0, 2.270666203345212, 13.527773164816027, 0.12564981541510412, 114.41323102111011, 78.61681311487452, 0.2406977587928617, 119.24607503582396, 0.0, 0.5359442185878852, 48.07736942345674, 0.0, 0.3599958995645177, 690.2591240301789, 207.91438186146377, 0.48543765987271137, 14.680453910244196, 5.188538110915026, 0.3647129433389382, 0.719950223037577, 2.0960272775558493, 0.26206216699542934, 65.801009847177, 70.38197070031565]]]
    # negative_rules = [[[0.09730433389029686, 10.72488908170808, 1.4210336703586401, 0.8798296958045969, 0.0, 156.68487438489808, 0.2260316174438406, 66.51647563638303, 109.4420306756077, 0.48940397457584695, 45.68957589373051, 0.0, 0.4248541194269987, 532.0756552902202, 651.553556346356, 0.14446986533733758, 0.0, 49.32589706522973, 0.39587616549337706, 0.5499826205876575, 1.8889096306511064, 0.20482923500103029, 72.72190888765896, 58.52306312528207]], [[0.5320822651107712, 0.0, 17.0, 0.33830483648893667, 94.08283209181732, 30.40285479653762, 0.2443081371138998, 106.29785576920989, 0.0, 0.3977564803458879, 69.01991152350931, 90.99983448808223, 0.4987445179108906, 348.1955835800019, 449.2213869479723, 0.33039486262583606, 44.90544887091697, 44.159965920755965, 0.0, 1.0482385837772161, 0.9466763030733333, 0.19959307008128702, 69.51174708120881, 25.83708302945866]], [[0.0, 8.927715905782875, 0.0, 0.612049164642365, 13.153209153756052, 162.13046805966394, 0.21202703196454412, 73.92011856560401, 57.045859671519274, 0.21204491759465682, 62.36414748928545, 84.8842276008695, 0.1994887606617086, 318.7039332824558, 43.41399508876573, 0.22469980113309984, 24.463254017080384, 19.6122832327049, 0.0, 2.42, 2.42, 0.0, 21.0, 69.69650865211139]], [[0.16848558914817735, 17.0, 12.683900255102458, 0.4490239430381266, 0.0, 159.390336719966, 0.3699748100010386, 38.6173622022901, 92.9078914985692, 0.6035212303440081, 99.0, 19.96051672140812, 0.4142350264524563, 494.702323894765, 306.8620474698217, 0.3554918159522089, 28.25000503296443, 46.24899990520127, 0.4055626144587757, 0.5760136017756553, 1.728088913307769, 0.48045625197116937, 61.1351374706489, 62.45929292967561], [0.4489407155346712, 8.191219773061142, 0.8143018261860436, 0.5250713798623877, 38.107516201904126, 155.80859056316712, 0.16093092674672194, 44.44200620087862, 14.35165721925059, 0.010404664733924873, 0.0, 61.2953642349621, 0.1526947662477195, 607.9872899720136, 403.24191318780026, 0.06538791108774517, 5.284996281394463, 35.160294481971604, 0.003726826822550322, 0.7421043440484997, 2.3809798623494163, 0.1513093414173179, 58.57962752535617, 64.45275562777542]], [[0.319794133415692, 0.0, 10.583930426950316, 1.0, 148.70899367110485, 20.75956573546456, 0.4609209094692386, 109.49742472811207, 62.71888728251179, 0.5806522674861005, 8.087978421974878, 99.0, 0.0, 243.20940046097726, 61.191450437813494, 0.4077950173482351, 44.490120091701485, 61.10938910700668, 0.18542714320849024, 0.7434364769597681, 2.0070070153379187, 0.36315221684800403, 34.64400671032992, 21.0], [0.16445752213801082, 14.399611694264438, 0.0, 0.49211249137371754, 161.3352947154081, 141.10681002505052, 0.06638572860490174, 88.77594997926693, 48.38948373081514, 0.644556659806966, 30.557188816580826, 99.0, 0.32250842214253084, 248.6986992298033, 55.01051527365845, 0.4710272782028828, 48.18451421046205, 54.07303184658725, 0.3442338137328914, 0.8020107039321646, 2.42, 0.0909360333266156, 81.0, 62.18141860717652], [0.006374256656811128, 6.55333026152257, 8.000918816971181, 0.33973365181210047, 15.585683588696364, 13.797238178571813, 0.44749649222446153, 89.12566501950431, 85.7695987356163, 0.4026957696859663, 58.040646627610705, 38.614543124370115, 0.10316481404763, 623.3113409388359, 388.441207308024, 0.18515482182915266, 11.09401026289343, 6.303392299037508, 0.07537889419274069, 2.225132711218584, 0.7202649642742996, 0.8745781391458465, 81.0, 46.38564596911056], [0.1458319127159763, 2.232447428414795, 3.3861147672052643, 0.18353232231922434, 90.94585652655776, 180.6470221848796, 0.4797054638159758, 13.125864467367258, 116.13759672454977, 0.4282057369551755, 74.03512018408512, 66.63055897339453, 0.8342953698281631, 826.5151817108235, 75.94246697116053, 0.44162558192397794, 41.12007374161208, 49.04352311330384, 0.025547623828896526, 0.31760220702245534, 1.3156921120388991, 0.37523097506044467, 77.14719221995145, 77.56017434255418], [0.37284134525414425, 15.325362456162319, 2.8925772935965295, 0.19588823890168494, 187.2143720775482, 40.611778596691444, 0.35637967977398877, 21.620707874735917, 95.70745300832895, 0.3629061295040682, 90.42699717986105, 51.550526060855624, 0.07647112282699309, 306.9864016327091, 159.93175878468315, 0.11707441136481256, 52.35143214011719, 3.943623367834238, 0.9070045140067742, 2.2264526675296805, 0.078, 0.17102653563252934, 42.15384837619189, 36.33354344022062]]]

    union_positive = []
    for rules in positive_rules:
        best,accuracy = pickBest(rules,test_df,1)
        if log_result:
            log(best,accuracy,"pos_picked")
        union_positive.append(best)
    

    union_negative = []
    for rules in negative_rules:
        best,accuracy = pickBest(rules,test_df,0)
        if log_result: 
            log(best,accuracy,"neg_picked")
        union_negative.append(best)

    final_pos_rule_or = union_OR(union_positive)
    final_neg_rule_or = union_OR(union_negative)

    TP,FP = score(test_df,final_pos_rule_or,1)
    TN,FN = score(test_df,final_neg_rule_or,0)

    print(f"{TP}  {FP}\n{FN}  {TN}")

if __name__ == "__main__":
    start_time = time.time()

    # method1()
    method2(log_result=False) 

    print("\n--------------------------------------------\n")
    print(f"\nTotal execution time : { round((time.time() - start_time)/60,2) } min")